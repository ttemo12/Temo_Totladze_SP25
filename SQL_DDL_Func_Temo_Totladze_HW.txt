What operations do the following functions perform: film_in_stock, film_not_in_stock, inventory_in_stock, get_customer_balance, inventory_held_by_customer, rewards_report, last_day? You can find these functions in dvd_rental database.
Why does ‘rewards_report’ function return 0 rows? Correct and recreate the function, so that it's able to return rows properly.
Is there any function that can potentially be removed from the dvd_rental codebase? If so, which one and why?
* The ‘get_customer_balance’ function describes the business requirements for calculating the client balance. Unfortunately, not all of them are implemented in this function. Try to change function using the requirements from the comments.
* How do ‘group_concat’ and ‘_group_concat’ functions work? (database creation script might help) Where are they used?
* What does ‘last_updated’ function do? Where is it used?
* What is tmpSQL variable for in ‘rewards_report’ function? Can this function be recreated without EXECUTE statement and dynamic SQL? Why?



film_in_stock takes 2 variables in and returns the id of that film in a specified store
inventory_in_stock returns boolean, checks if count of records in rentals where id = input is 0 or not if it is zero than it has not been rented out and is in stock, if theres one rental that is returned its out of stock
film_not_in_stock just like film_in_stock uses inventory_in_stock function inside takes in 2 variables film_id and store_id checks if it is in stock and returns the film id that isnt in stock
get_customer_balance function takes in 2 variables customer_id and date it returns the balance that has to be paid by the customer inside block defines 3 variables fees paid to rent the film, late fees and sum of all previous payments 
inventory_held_by_customer returns customer_id of the holder of inventory_id
rewards_report this ones kind of hard to understand with lot of complex logic inside but it takes in 2 variables min_monthly_purchases and min_dollar_amount_purchased and returns all the customers that match this requirements main calculation comes from the temporary table that is created inside the pl block and dropped in the end
last_day takes in timestamp as an input and returns the last day of that specific month, achieved extracting year and month adding one to month and then substracting a day from it, in case of december it adds one to year as well but does the other things the same

it returns 0 rows because that rewards_report compares with the month corresponding to 3 month before stats but the data is from 2017 so the data 3 month before right now doesnt exist

inventory_held_by_customer this can be achieved by a very simple query that counts and checks that it is more than 0 and return date is null

3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
SELECT COALESCE(SUM(CASE
    WHEN (rental.return_date IS NULL AND p_effective_date - rental.rental_date > (film.rental_duration * 2 * '1 day'::interval))
    THEN film.replacement_cost
    WHEN (rental.return_date IS NOT NULL AND rental.return_date - rental.rental_date > (film.rental_duration * 2 * '1 day'::interval))
    THEN film.replacement_cost
    ELSE 0
END),0)
INTO v_replacement_fees
FROM rental, inventory, film
WHERE film.film_id = inventory.film_id
AND inventory.inventory_id = rental.inventory_id
AND rental.rental_date <= p_effective_date
AND rental.customer_id = p_customer_id;

group_concat and ‘_group_concat’ work together in sql statement when group_concat is called it implicitly calls _group_concat for each member of the input and returns them out being comma separated 

it is used while creating a new trigger, when this function is called while creating a trigger it will set last_update row to current time 

tmpsql is used as a text string but inside there are sql statements that are then executed when calling EXECUTE, this can be accomplished without execute and without using this tmpsql variable and just normally creating a table
then populating it getting values from it to return from the main function and then dropping that table, i think the first original code gives writer more control over how the code is executed whereas the second approach 
gives the control of execution to sql internals